SETUP AND INIT
* git init
	* Initialize a new Git repo

* git clone
	* Clone an existing repo from Github to the local machine


STAGE AND SNAPSHOT
* git status
	* Check the status of files in the working directory and staging area

* git add
	* add files to the staging area before committing
	* git add -A: to stage new, modified, and deleted files across the repository
	* git add .: to stage only new and modified files in the current and sub-directories.
	* git add -u: to stage only modified and deleted files across the repository

* git commit
	* commit changes in the staging area to the repo with a msg
	* git commit -m 'commit message': commit all staged changes
	* git commit -am 'commit message': commit all tracked changes
	* git commit --amend: modify the last commit


BRANCHES
* git branch
	* list, create, or delete branch
	* git branch -a: list all the branches
	* git branch branch_name: create a new branch but doesn't checkout
	* git branch -d branch_name: delete a branch if there is no unmerged changes
	* git branch -D branch_name: delete a branch forcefully
	* git branch -m branch_name: rename the branch name
	* git branch --set-upstream-to remote_branch: sets the upstream branch to the specified remote branch

* git checkout
	* create branch, switch b/w branches, or restore working directory files
	* git checkout -b branch_name: create and switch to new branch
	* git checkout branch_name: switch to an existing branch
	* git checkout <commit>: switches working directory to specific commit


SHARE AND UPDATE
* git remote add [ref] [url]
	* add remote repo
	
* git push
	* push commits from the local repo to a remote repo

* git pull
	* Fetch and merge changes from a remote repo into a local branch
	* fetch + merge, for a single branch

* git fetch
	* Fetch the remote changes but do not merge	
	
* git merge
	* Merge changes from one branch into another


TEMPORARY COMMITS
* git stash
	* stash changes

* git stash pop
	* apply and discard the stash

* git stash apply
	* apply the stash

* git stash drop
	* discard stash


REWRITE HISTORY
* git rebase
	* rebase current branch
	* git rebase -i: rebase interactively, rewrite commit history
	* git rebase branch_name: rebase the current branch onto another branch

* git reset
	* unstage file, reset to commit
	* git reset HEAD~1: Undo the last commit, preserving changes locally
	* git reset --soft HEAD^: undo the last commit, but keep the changes
	* git reset --hard: reset everything to previous commit
	
* git revert
	* git revert commit_id: create a new commit that undoes the changes of a specific commit

* git cherry-pick
	* Apply changes from a specific commit


INSPECT AND COMPARE
* git log
	* view the commit history
	* git log --stat: show commit logs with stats
* git log branchB branchA
	* show unique commits in branchA

* git diff
	* Show changes b/w commits, commit and working tree, etc.

* git show [SHA]
	* show commit
	
 
